#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset


# N.B. If only .env files supported variable expansion...
# export CELERY_BROKER_URL="${REDIS_URL}"

if [ -z "${CELERY_BROKER_URL:+x}" ]; then
    export CELERY_BROKER_URL="amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@${RABBITMQ_DEFAULT_HOST}:${RABBITMQ_DEFAULT_PORT}/${RABBITMQ_DEFAULT_VHOST}"
fi

if [ -z "${FLOWER_BROKER_API:+x}" ]; then
    export FLOWER_BROKER_API="http://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@${RABBITMQ_DEFAULT_HOST}:15672/api/"
fi

if [ -z "${POSTGRES_USER:+x}" ]; then
    base_postgres_image_default_user='postgres'
    export POSTGRES_USER="${base_postgres_image_default_user}"
fi

if [ -z "${DATABASE_URL:+x}" ]; then
    export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
fi


postgres_ready() {
python << END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}

until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL to become available...'
  sleep 5
done
>&2 echo 'PostgreSQL is available'

env | sort | sed 's/\=/::/' | awk -F '::' '{print $1"=""\""$2"\""}' > /etc/environment

env | while read -r LINE; do
    IFS="=" read VAR VAL <<< ${LINE}
    sed --in-place "/^${VAR}/d" /etc/security/pam_env.conf || true
    echo "${VAR} DEFAULT=\"${VAL}\"" >> /etc/security/pam_env.conf
done

for line in $(env | sort | sed 's/\=/::/' | awk -F '::' '{print $1"=""\""$2"\""}');
  do
    echo "export $line" >> ~/.bashrc;
  done

exec "$@"
